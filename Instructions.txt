** ****************************************
Class Library
** ****************************************


Nedan ser du en lista med Work Items.... (tex. #1 Skapa en Blank Solution)
Följ alla work items i tur och ordning
Skapa en ny commit för varje work item (med BRA commit rubrik)

** ****************************************
Work Items
** ****************************************

#1 Skapa en 'Blank Solution' med relevant namn i Visual Studio

#2 Synka den nya solution med ditt gitHub konto


** ****************************************
Skapa Class Library
** ****************************************

#3 Högerklicka på din solution and välj 'Add' => 'New Project'
	Välj C# 'Class Library'
	Döp den till 'SuperDuperClassLibrary'
	.NET 6.0

#4 VS skapade en klass som heter 'Class 1'
	Döp om den till 'MathServices'

#5 Skapa fyra metoder som returner resultatet av en matematisk beräkning
	Addition()
	Subtraction()
	Multiplication()
	Division()

** ****************************************
Project 1
** ****************************************

#6 Högerklicka på din solution and välj 'Add' => 'New Project'
	Välj C# 'Console App'
	Döp den till 'Project1'
	.NET 6.0

#7 I Main i Project1 skapa en new MathServices()
	Hmmm... jag får error. VS säger att klassen MathServices existerar inte!
	Undrar om jag kan lägga till en 'referens' till min Class Library?

	I Project1 högerklicka på 'Dependencies'
	Välj 'Add Project reference'
	Välj 'SuperDuperClassLibrary' (titta under Dependencies => Projects nu!)

	Hmmmm... det är fortfarande fel!
	Låt musen vilar över felet och välv 'Show Potential Fixes'
	Nu kan du välja 'using 'SuperDuprClassLibrary'

	Skriv resultatet till consolen och klicka på F5.

** ****************************************
FEL FEL FEL FEL FEL FEL FEL FEL FEL FEL FEL 
** ****************************************

Oh noooo! Jag får en error!
'A project with an output type of 'Class Library' cannot be started directly!'

Vi kan högerklicka på 'Project1' och se till att det projektet startas upp först.
	'Set as startup project'

Testa F5 nu. Success!!!

** ****************************************
** ****************************************

#8 Upprepa work item #6 & #7.
	Denna gång ska projektet döpas till 'Project2'
	Anropa Multiplication() & Division() i detta projekt

	Klicka på F5
	Hmmm... Jag ser resultat från Project1 i consolen
	Vi kan högerklicka på 'Project2' och se till att det projektet startas upp först.
	'Set as startup project'

Testa F5 nu. Success!!!

** ****************************************
Fördelar med Class Library
** ****************************************
Nu ser ni hela poängen med class library.
Funktionerna som finns i library definieras endast en gång....
.... men de kan användas av flera projekt i en och samma Solution :)

** ****************************************
Project 3
** ****************************************

#9 Project3 ska kunna koppla upp sig mot en databas (Database First)...
	Högerklicka på din solution and välj 'Add' => 'New Project'
	Välj C# 'Console App'
	Döp den till 'Project3'
	.NET 6.0

#10 Lägg till alla nödvändiga nuget paket till SOLUTION!
	I detta exempel kan du installera dessa paket i samtliga projekt!
	Microsoft.EntityFramworkCore.SqlServer
	Microsoft.EntityFramworkCore.Tools

#11 	I Project3 högerklicka på 'Dependencies'
	Välj 'Add Project reference'
	Välj 'SuperDuperClassLibrary' (titta under Dependencies => Projects nu!)


#12 Vi vill lägga till vår DBContext i vår class library. På så sätt finns den endast på ett ställe!
Vi får dock tillgång till vår DbContext från olika projekt ändå! Great! 

(OBS: Viktigt att man välja class library som default project i din package console!!)
I package manager consolen klistra in denna rad...
 
	Scaffold-DbContext "Server=localhost;Database=Northwind;Trusted_Connection=True;TrustServerCertificate=true" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models
	Nu har vi en DbContext till 'Northwind' databasen från vår class library.

#13 I Main på Project3 skapa en koppling till Northwind Databasen
	Loopa igenom alla Produkter för att dubbelkolla att det funkade

Får du 77 produkter?
Dubbelkolla summan med hjälp av din SQL explorer i Visual Studio
	

** ****************************************
Övningar
** ****************************************

a: Skapa en appsettings.json
b: Skapa CRUD funktionalitet i Projekt 3
	(Tips: Börja med en meny som erbjuder möjligheten att CRUD:a antingen Produkterna eller Kategorierna)



	
	

	







